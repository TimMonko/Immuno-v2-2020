install.packages('tidyverse','svglite','broom')
install.packages('tidyverse','svglite','broom')
library(tidyverse)
library(tidyverse)
library(svglite)
library(broom)
cbTim <- c('#999999', '#E69F00', '#56B4E9', '#009E73', '#D55E00', '#0072B2', '#CC79A7')
library(tidyverse) # Includes ggplot2, tidyr, dply*r, stringr, readr, tibble, purrr, forcats
library(svglite) # For exporting plots as .svg graphics to use as vector format
library(broom) # Tidy's up some statistical outputs
dir.name <- 'S1V1_RORBrn2EdU_Stats'
dir.create(dir.name)
knitr::opts_chunk$set(cache = TRUE, cache.path = paste0(dir.name, '-cache/')) # fig.path = 'Figs/' ## Will save figs into a separate file
dir.name <- 'S1V1_new_RORBrn2EdU_Stats'
dir.create(dir.name)
knitr::opts_chunk$set(cache = TRUE, cache.path = paste0(dir.name, '-cache/')) # fig.path = 'Figs/' ## Will save figs into a separate file
# echo = FALSE prevents printing of mundance code (can always set a function clause to echo = TRUE, if needed), by default echo = TRUE
wd.path <- getwd()
file.paths <- list.files(path = wd.path, pattern = '\\.csv$')
# Use all cols to identify certain columns as factors, without this it cannot generate the correct tibble
all.cols <- cols(
genotype = col_factor(),
slice = col_factor(),
pair = col_factor(),
region = col_factor()
)
# A function for csv bind - brings in each file to create one master tibble
csv_bind <- function(wd.path = getwd(), text.pattern, col.types){
bound <- do.call(rbind,
lapply(list.files(path = wd.path, pattern = text.pattern),
function(x) read_csv(x, col_types = col.types)))
return(bound)
}
# Use the function to call in files from getwd() [the default] based on the pattern
all.centers <- csv_bind(text.pattern = 'centers', col.types = all.cols)
sum.cols <- cols(
genotype = col_factor(),
slice = col_factor(),
pair = col_factor()
)
summarize.cells<- csv_bind(text.pattern = 'cellmean', col.types = sum.cols)
summarize.bins<- csv_bind(text.pattern = 'bins', col.types = sum.cols)
# Change data to just cell counts in wide format, for ratiometric calculations
summarized.wide <- summarize.cells %>%
filter(region == 'S1') %>%
pivot_wider(id_cols = c(genotype, pair, region), names_from = slice, values_from = cells, names_prefix = 'cells_') # %>% replace(is.na(.),0) # NAs in the dataset become zero
# Divide columns to produce ratiometric data
summarized.manip <- summarized.wide %>%
mutate(ROR_EdU = cells_5/cells_3) %>% # Brn2+EdU+/EdU+ cells (how many of the EdU cells are Brn2 labeled)
mutate(Brn2_EdU = cells_6/cells_3) %>%
mutate(ROREdU_Brn2EdU = cells_7/cells_8) %>%
mutate(ROR_Brn2 = cells_1/cells_2)
# Filter out genotypes for comparisons
WT.summarized <- summarized.manip %>%
filter(genotype == 'WT') %>%
group_by(genotype, pair)
CKO.summarized <- summarized.manip %>%
filter(genotype == 'CKO') %>%
group_by(genotype, pair)
rel.CKO.summarized <- CKO.summarized[-1:-3]/WT.summarized[-1:-3]
rel.CKO.summarized <-rel.CKO.summarized %>% mutate(genotype = 'CKO') %>% mutate(pair = 1:(nrow(rel.CKO.summarized)))
rel.WT.summarized <- WT.summarized[-1:-3]/WT.summarized[-1:-3]
rel.WT.summarized <-rel.WT.summarized %>% mutate(genotype = 'WT') %>% mutate(pair = 1:nrow(rel.WT.summarized))
t.test(WT.summarized$ROR_EdU, CKO.summarized$ROR_EdU, paired = TRUE)
t.test(WT.summarized$Brn2_EdU, CKO.summarized$Brn2_EdU, paired = TRUE)
t.test(WT.summarized$ROREdU_Brn2EdU, CKO.summarized$ROREdU_Brn2EdU, paired = TRUE)
t.test(WT.summarized$ROR_Brn2, CKO.summarized$ROR_Brn2, paired = TRUE)
t.test(rel.WT.summarized$cells_1, rel.CKO.summarized$cells_1, paired = TRUE)
t.test(rel.WT.summarized$cells_2, rel.CKO.summarized$cells_2, paired = TRUE)
t.test(rel.WT.summarized$cells_3, rel.CKO.summarized$cells_3, paired = TRUE)
t.test(rel.WT.summarized$cells_4, rel.CKO.summarized$cells_4, paired = TRUE)
t.test(rel.WT.summarized$cells_5[-1], rel.CKO.summarized$cells_5[-1], paired = TRUE)
t.test(rel.WT.summarized$cells_6[-1], rel.CKO.summarized$cells_6[-1], paired = TRUE)
t.test(rel.WT.summarized$cells_7[-1], rel.CKO.summarized$cells_7[-1], paired = TRUE)
t.test(rel.WT.summarized$cells_8[-1], rel.CKO.summarized$cells_8[-1], paired = TRUE)
t.test(rel.WT.summarized$cells_9, rel.CKO.summarized$cells_9, paired = TRUE)
# For distribution differences
manova.abs <- manova(cbind(abs_0, abs_1, abs_2, abs_3) ~ genotype, data = summarized.filter.slice)
# Change data to just cell counts in wide format, for ratiometric calculations
summarized.wide <- summarize.cells %>%
filter(region == 'S1') %>%
pivot_wider(id_cols = c(genotype, pair, region), names_from = slice, values_from = cells, names_prefix = 'cells_') # %>% replace(is.na(.),0) # NAs in the dataset become zero
# Divide columns to produce ratiometric data
summarized.manip <- summarized.wide %>%
mutate(ROR_EdU = cells_5/cells_3) %>% # Brn2+EdU+/EdU+ cells (how many of the EdU cells are Brn2 labeled)
mutate(Brn2_EdU = cells_6/cells_3) %>%
mutate(ROREdU_Brn2EdU = cells_7/cells_8) %>%
mutate(ROR_Brn2 = cells_1/cells_2)
# Filter out genotypes for comparisons
WT.summarized <- summarized.manip %>%
filter(genotype == 'WT') %>%
group_by(genotype, pair)
CKO.summarized <- summarized.manip %>%
filter(genotype == 'CKO') %>%
group_by(genotype, pair)
WT.summarized
?t.test
t.test(WT.summarized$ROR_EdU:Brn2_EdU, CKO.summarized$ROR_EdU:Brn2_EdU, paired = TRUE)
?class
?type
typeof(WT.summarized)
class(WT.summarized)
summarized.manip
WT.summarized
t.test(ROR_EdU ~ genotype, summarized.manip)
t.test(WT.summarized$ROR_EdU, CKO.summarized$ROR_EdU, paired = TRUE)
t.test(ROR_EdU ~ genotype, summarized.manip, paired = TRUE)
# New t.test format t.test(column ~ group, dataset, paired = TRUE)
t.test(ROR_EdU ~ genotype, summarized.manip, paired = TRUE)
t.test(select(5) ~ genotype, summarized.manip, paired = TRUE)
# New t.test format t.test(column ~ group, dataset, paired = TRUE)
t.test(ROR_EdU ~ genotype, summarized.manip, paired = TRUE, var.equal = TRUE)
# New t.test format t.test(column ~ group, dataset, paired = TRUE)
t.test(ROR_EdU ~ genotype, summarized.manip, paired = TRUE)
rel.CKO.summarized <- CKO.summarized[-1:-3]/WT.summarized[-1:-3]
rel.CKO.summarized <-rel.CKO.summarized %>% mutate(genotype = 'CKO') %>% mutate(pair = 1:(nrow(rel.CKO.summarized)))
# New relative t.test format: t.test(column, mu = 1, paired = TRUE)
t.test(cells_1, rel.CKO.summarized, mu = 1)
rel.CKO.summarized
class(rel.CKO.summarized)
?t.test
# New relative t.test format: t.test(column, mu = 1, paired = TRUE)
t.test(rel.CKO.summarized$cells_1, mu = 1)
t.test(rel.WT.summarized$cells_1, rel.CKO.summarized$cells_1, paired = TRUE)
col.names(rel.CKO.summarized)
colnames(rel.CKO.summarized)
z <- colnames(rel.CKO.summarized)
select(z[1], rel.CKO.summarized)
select(rel.CKO.summarized, z[1])
t.test(select(rel.CKO.summarized, z[1]), mu = 1)
t.test(select(rel.CKO.summarized, z[1]), mu = 0)
t.test(select(rel.CKO.summarized, z[1]), mu = 1)
t.test(select(rel.CKO.summarized, rel.col.names[i]), mu =1)
fn.t.test <- function(columns = length(rel.col.names)) {
for (i in 1:columns){
t.test(select(rel.CKO.summarized, rel.col.names[i]), mu =1)
}
}
for (i in 1:columns){
t.test(select(rel.CKO.summarized, rel.col.names[i]), mu =1)
}
fn.t.test <- function(columns = length(rel.col.names)) {
for (i in 1:columns){
t.test(select(rel.CKO.summarized, rel.col.names[i]), mu =1)
}
}
for (i in 1:length(rel.col.names)){
t.test(select(rel.CKO.summarized, rel.col.names[i]), mu =1)
}
# Now in function format using colname pulls
rel.col.names <- colnames(rel.CKO.summarized)
fn.t.test <- function(columns = length(rel.col.names)) {
for (i in 1:columns){
t.test(select(rel.CKO.summarized, rel.col.names[i]), mu =1)
}
}
for (i in 1:length(rel.col.names)){
t.test(select(rel.CKO.summarized, rel.col.names[i]), mu =1)
}
t.test(select(rel.CKO.summarized, rel.col.names[2]), mu = 1)
t.test(select(rel.CKO.summarized, rel.col.names[1]), mu = 1)
t.test
for (i in 1:length(rel.col.names)){
print(
t.test(select(rel.CKO.summarized, rel.col.names[i]), mu =1)
)
}
